# Lines configured by zsh-newuser-install
HISTFILE=~/.zhistory
HISTSIZE=999999999
SAVEHIST=$HISTSIZE
bindkey -e

autoload -U compinit
compinit
zstyle :compinstall filename '/home/jaga/.zshrc'

zmodload -a zsh/stat stat
zmodload -a zsh/zpty zpty
zmodload -a zsh/zprof zprof
zmodload -ap zsh/mapfile mapfile

# Completions 
zstyle ':completion:*::::' completer _expand _complete _ignored _approximate
zstyle -e ':completion:*:approximate:*' max-errors 'reply=( $(( ($#PREFIX+$#SUFFIX)/3 )) numeric )'
zstyle ':completion:*:expand:*' tag-order all-expansions
zstyle ':completion:*' verbose yes
zstyle ':completion:*:descriptions' format '%B%d%b'
zstyle ':completion:*:messages' format '%d'
zstyle ':completion:*:warnings' format 'No matches for: %d'
zstyle ':completion:*:corrections' format '%B%d (errors: %e)%b'
zstyle ':completion:*' group-name ''
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}'
zstyle ':completion:*:*:-subscript-:*' tag-order indexes parameters
zstyle ':completion:*:*:(^rm):*:*files' ignored-patterns '*?.o' '*?.c~''*?.old' '*?.pro'
zstyle ':completion:*:functions' ignored-patterns '_*'

zstyle ':completion:*' menu yes select

setopt  APPEND_HISTORY

setopt  HIST_IGNORE_ALL_DUPS

setopt  HIST_IGNORE_SPACE

setopt NO_BEEP

setopt AUTO_CD

setopt CORRECT_ALL

#setopt SH_WORD_SPLIT

setopt histexpiredupsfirst histfindnodups

setopt histignoredups histnostore histverify histignorespace extended_history  share_history

setopt   notify globdots correct pushdtohome cdablevars autolist
setopt   correctall autocd recexact longlistjobs
setopt   autoresume histignoredups pushdsilent noclobber
setopt   autopushd pushdminus extendedglob rcquotes mailwarning
unsetopt bgnice autoparamslash

setopt  IGNORE_EOF

typeset -U path cdpath fpath manpath

autoload colors && colors

zstyle ':completion:*:*:kill:*:processes' list-colors "=(#b) #([0-9]#)*=$color[cyan]=$color[red]"

typeset -g -A key

autoload -U url-quote-magic
zle -N self-insert url-quote-magic

autoload -U predict-on
zle -N predict-on
zle -N predict-off
bindkey -M emacs "^X^Z" predict-on
bindkey -M emacs "^Z" predict-off

bindkey -v

bindkey '^P' up-history
bindkey '^N' down-history
bindkey '^?' backward-delete-char
bindkey '^h' backward-delete-char
bindkey '^w' backward-kill-word
bindkey '^r' history-incremental-search-backward
export KEYTIMEOUT=1

autoload -U edit-command-line

zle -N  edit-command-line
bindkey -M emacs "^X^E" edit-command-line

bindkey -M emacs "^N" complete-word

mkcd(){ mkdir $1; cd $1 }

rmcd(){ local P="`pwd`"; cd .. && rmdir "$P" || cd "$P"; }

name() {
    name=$1
    vared -c -p 'rename to: ' name
    command mv $1 $name
}

extract () {
    if [ -f $1 ] ; then
        case $1 in
            *.tar.bz2)   tar xjf $1        ;;
            *.tar.gz)    tar xzf $1     ;;
            *.bz2)       bunzip2 $1       ;;
            *.rar)       unrar x $1     ;;
            *.gz)        gunzip $1     ;;
            *.tar)       tar xf $1        ;;
            *.tbz2)      tar xjf $1      ;;
            *.tgz)       tar xzf $1       ;;
            *.zip)       unzip $1     ;;
            *.Z)         uncompress $1  ;;
            *.7z)        7z x $1    ;;
            *)           echo "Unknown filetype '$1'..." ;;
        esac
    else
        echo "'$1' is not a valid file"
    fi
}

pk () {
    if [ $1 ] ; then
        case $1 in
            tbz)       tar cjvf $2.tar.bz2 $2      ;;
            tgz)       tar czvf $2.tar.gz  $2       ;;
            tar)       tar cpvf $2.tar  $2       ;;
            bz2)       bzip2 $2 ;;
            gz)        gzip -c -9 -n $2 > $2.gz ;;
            zip)       zip -r $2.zip $2   ;;
            7z)        7z a $2.7z $2    ;;
            *)         echo "'$1' cannot be packed via pk()" ;;
        esac
    else
        echo "'$1' is not a valid file"
    fi
}

READNULLCMD=${PAGER}

export GREP_COLOR="1;33"

[[ -x $(whence -p most) ]] && export PAGER=$(whence -p most)

export EDITOR=vim

autoload zkbd
[[ ! -f ${ZDOTDIR:-$HOME}/.zkbd/xterm-:0.0 ]] && zkbd
source ${ZDOTDIR:-$HOME}/.zkbd/xterm-:0.0

[[ -n ${key[Home]}      ]] && bindkey  "${key[Home]}"    beginning-of-line
[[ -n ${key[End]}       ]] && bindkey  "${key[End]}"     end-of-line
[[ -n ${key[Insert]}    ]] && bindkey  "${key[Insert]}"  overwrite-mode
[[ -n ${key[Delete]}    ]] && bindkey  "${key[Delete]}"  delete-char
[[ -n ${key[Backspace]} ]] && bindkey  "${key[Backspace]}"   backward-delete-char
[[ -n ${key[PageUp]}    ]] && bindkey "${key[PageUp]}" up-line-or-history
[[ -n ${key[Delete]}    ]] && bindkey "${key[Delete]}" delete-char
[[ -n ${key[PageDown]}  ]] && bindkey "${key[PageDown]}" down-line-or-history
[[ -n ${key[Left]}      ]] && bindkey "${key[Left]}" backward-char
[[ -n ${key[Right]}     ]] && bindkey "${key[Right]}" forward-char
#[[ -n ${key[Up]}        ]] && bindkey "${key[Up]}" up-line-or-search
#[[ -n ${key[Down]}      ]] && bindkey "${key[Down]}" down-line-or-search
autoload -U up-line-or-beginning-search
autoload -U down-line-or-beginning-search
zle -N up-line-or-beginning-search
zle -N down-line-or-beginning-search
bindkey "^[[A" up-line-or-beginning-search # Up
bindkey "^[[B" down-line-or-beginning-search # Down
bindkey '\e[3~' delete-char # del
bindkey ';5D' backward-word # ctrl+left 
bindkey ';5C' forward-word #ctrl+right

PATH=$PATH:~/.cabal/bin:~/.cabal-dev/bin;
export PATH;

export OOO_FORCE_DESKTOP=gnome

export LESSCHARSET=UTF-8

export LS_COLORS='no=00;37:fi=00;37:di=01;36:ln=04;36:pi=33:so=01;35:do=01;35:bd=33;01:cd=33;01:or=31;01:su=37:sg=30:tw=30:ow=34:st=37:ex=01;31:*.cmd=01;31:*.exe=01;31:*.com=01;31:*.btm=01;31:*.sh=01;31:*.run=01;31:*.tar=33:*.tgz=33:*.arj=33:*.taz=33:*.lzh=33:*.zip=33:*.z=33:*.Z=33:*.gz=33:*.bz2=33:*.deb=33:*.rpm=33:*.jar=33:*.rar=33:*.jpg=32:*.jpeg=32:*.gif=32:*.bmp=32:*.pbm=32:*.pgm=32:*.ppm=32:*.tga=32:*.xbm=32:*.xpm=32:*.tif=32:*.tiff=32:*.png=32:*.mov=34:*.mpg=34:*.mpeg=34:*.avi=34:*.fli=34:*.flv=34:*.3gp=34:*.mp4=34:*.divx=34:*.gl=32:*.dl=32:*.xcf=32:*.xwd=32:*.flac=35:*.mp3=35:*.mpc=35:*.ogg=35:*.wav=35:*.m3u=35:';
zstyle ':completion:*:default' list-colors ${(s.:.)LS_COLORS}

alias grep='grep --color=auto'

alias df='df -h'
alias du='du -h'

alias mv='nocorrect mv -i'

alias cp='nocorrect cp -iR'

alias rm='nocorrect rm -i'

alias rmf='nocorrect rm -f'

alias rmrf='nocorrect rm -fR'

alias mkdir='nocorrect mkdir'

alias ls='ls -lhF --color=auto'

[[ -f /usr/bin/grc ]] && {
  alias ping="grc --colour=auto ping"
  alias traceroute="grc --colour=auto traceroute"
  alias make="grc --colour=auto make"
  alias diff="grc --colour=auto diff"
  alias cvs="grc --colour=auto cvs"
  alias netstat="grc --colour=auto netstat"
}

alias logc="grc cat"
alias logt="grc tail"
alias logh="grc head"

alias -s {png,gif,jpg,jpeg}=mirage
alias -s {pdf,djvu}=evince

autoload -U pick-web-browser
alias -s {html,htm}=pick-web-browser

alias -g H="| head"
alias -g T="| tail"
alias -g G="| grep"
alias -g L="| less"
alias -g M="| most"
alias -g B="&|"
alias -g HL="--help"
alias -g LL="2>&1 | less"
alias -g CA="2>&1 | cat -A"
alias -g NE="2> /dev/null"
alias -g NUL="> /dev/null 2>&1"


# 
# sudo 
alias halt="sudo halt"
alias reboot="sudo reboot"
alias gparted="sudo gparted"

alias dirf='find . -type d | sed -e "s/[^-][^\/]*\//  |/g" -e "s/|\([^ ]\)/|-\1/"'

alias psgrep='ps aux | grep $(echo $1 | sed "s/^\(.\)/[\1]/g")'

alias delspacecomm="sed '/ *#/d; /^ *$/d' $1"
source ~/.zsh/git-prompt/zshrc.sh
GIT_PROMPT_EXECUTABLE="haskell"

PROMPT=$'\n%{\e[1;31m%}⎧%{\e[1;37m%}%~ \n%{\e[1;31m%}⎩%{\e[1;32m%}%n %{\e[1;36m%}｢%?｣'
#if [[ $PWD == $HOME ]]; then
PROMPT+=$' $(git_super_status)'
curshel=$(ps -ocommand= -p $PPID | awk -F/ '{print $NF}' | awk '{print $1}')
if [[ $curshel == "rc" ]]; then
    PROMPT+=$' NIX-SHELL'
fi

if [[ $EUID == 0 ]] 
then
PROMPT+=$' #%{\e[0m%} ' # user dir %
else
PROMPT+=$' %#%{\e[0m%} ' # root dir #
fi
RPROMPT=$'%{\e[1;36m%}{%D{%H:%M:%S}}%{\e[0m' 
function zle-line-init zle-keymap-select {
    RPROMPT="${${KEYMAP/vicmd/%{$fg_bold[red]%\}༽}/(main|viins)/%{$fg_bold[blue]%\}༼}%{$reset_color%}"
    RPROMPT+=$'%{\e[1;36m%}᚜%D{%H:%M:%S}᚛%{\e[0m' 
    zle reset-prompt
}
zle -N zle-line-init
zle -N zle-keymap-select

alias ls='ls -F --color=auto'
alias l='ls -lhF --group-directories-first --color=auto'
alias grep='grep --colour=auto'


alias h='htop'
alias n='sudo nethogs'
alias io='sudo iotop'
alias editawesome='vim /etc/xdg/awesome/rc.lua'
alias screenshot='sleep 10;import -window root myscreen.png'
alias pacman='sudo pacman'
alias open='xdg-open'
alias connect='sudo netcfg -r Jaga-Jaga'
alias showdisk='sudo fdisk -l'
alias cp='cp'
alias :q='exit'
alias update='sudo bash -c "NIX_PATH=$NIX_PATH nixos-rebuild switch --upgrade"; nix-env -u --leq' #WTF


unsetopt correct_all ignoreeof
zstyle ':completion:*:processes' command 'ps -au$USER' 
zstyle ':completion:*:*:kill:*:processes' list-colors '=(#b) #([0-9]#)*=0=01;32'
export _JAVA_OPTIONS='-Dawt.useSystemAAFontSettings=on'
cat 2guys.txt
alias show_random_file_or_directory='ls | sed -n "$((RANDOM%$(ls | wc -l)+1))p"'
alias vim='vim -p'

toBackup() {cp "$1" "$1.backup"}
fromBackup() {cp "$1.backup" "$1"}
swapBackup() {cp "$1" "$1.backup.temp"; cp "$1.backup" "$1"; mv -f "$1.backup.temp" "$1.backup"}
alias getstats="cat ~/.zhistory | grep -E '^:\s([0-9]+):([0-9]+);([a-zA-Z]+)(.*)' | sed -r -e 's/^: ([0-9]+):0;([a-zA-Z]+)(.*)/\2/g' | sort | uniq -c | sort -n"
export NIXPKGS_ALL=/home/jaga/nixpkgs
query(){ nix-env -qa \* -P -f $NIXPKGS_ALL | grep -i "$1"; }
export TERM=xterm-256color  
alias nix-zsh="nix-shell --command zsh"

function ghc-pkg-clean() {
    for p in `ghc-pkg check $* 2>&1  | grep problems | awk '{print $6}' | sed -e 's/:$//'`
    do
        echo unregistering $p; ghc-pkg $* unregister $p
    done
}
export FPATH=.nix-profile/share/zsh/site-functions:~/.zsh/functions:$FPATH

function calc() {
    echo "$@" | octave -q --silent
}

countFiles () {
    # call the recursive function, throw away stdout and send stderr to stdout
    # then sort numerically
    countFiles_rec "$1" 2>&1 >/dev/null | sort -nr
}

countFiles_rec () {
    local -i nfiles 
    dir="$1"

    # count the number of files in this directory only
    nfiles=$(find "$dir" -mindepth 1 -maxdepth 1 -type f -print | wc -l)

    # loop over the subdirectories of this directory
    while IFS= read -r subdir; do

        # invoke the recursive function for each one 
        # save the output in the positional parameters
        set -- $(countFiles_rec "$subdir")

        # accumulate the number of files found under the subdirectory
        (( nfiles += $1 ))

    done < <(find "$dir" -mindepth 1 -maxdepth 1 -type d -print)

    # print the number of files here, to both stdout and stderr
    printf "%d %s\n" $nfiles "$dir" | tee /dev/stderr
}

unset SSH_ASKPASS
setopt interactivecomments
alias tmux='tmux attach || tmux new'
ssh-add ~/.ssh/git_rsa 2>/dev/null
alias bump='git commit -am "bump" -S'

fpath=(~/nix-zsh-completions $fpath)
source ~/nix-zsh-completions/nix.plugin.zsh
autoload -U compinit && compinit
NIX_GHC_VERSION=$(ghc --numeric-version)
export NIX_GHC="$HOME/.nix-profile/bin/ghc"
export NIX_GHCPKG="$HOME/.nix-profile/bin/ghc-pkg"
export NIX_GHC_DOCDIR="$HOME/.nix-profile/share/doc/ghc/html"
export NIX_GHC_LIBDIR="$HOME/.nix-profile/lib/ghc-${NIX_GHC_VERSION}"
alias xclip='xclip -selection clipboard'
alias weather="curl -4 http://wttr\.in/Saint-Petersburg"
source ~/.zsh/antigen-hs/init.zsh
